#!/usr/bin/env python3
import os, argparse, datetime

HEADER = """// ============================================================================
// Shader: {name}
// Type: {type}
// Generated by shadergen.py
// GLSL Version: 120
// Date: {date}
// ============================================================================
"""

VERTEX_BASIC = """#version 120
attribute vec3 aPos;
uniform mat4 uMVP;
void main() {
    gl_Position = uMVP * vec4(aPos, 1.0);
}
"""

FRAGMENT_BASIC = """#version 120
void main() {
    gl_FragColor = vec4(1.0);
}
"""

VERTEX_TEXTURED = """#version 120
attribute vec3 aPos;
attribute vec2 aTexCoord;
uniform mat4 uMVP;
varying vec2 vTexCoord;
void main() {
    vTexCoord = aTexCoord;
    gl_Position = uMVP * vec4(aPos, 1.0);
}
"""

FRAGMENT_TEXTURED = """#version 120
uniform sampler2D uTexture;
varying vec2 vTexCoord;
void main() {
    gl_FragColor = texture2D(uTexture, vTexCoord);
}
"""

# --- LIT (Lambert Diffuse)
# --- Lighting is pretty important!
VERTEX_LIT = """#version 120
attribute vec3 aPos;
attribute vec3 aNormal;
uniform mat4 uMVP;
uniform mat4 uModel;
uniform mat3 uNormalMatrix;
uniform vec3 uLightPos;
varying vec3 vNormal;
varying vec3 vLightDir;
void main() {
    vec4 worldPos = uModel * vec4(aPos, 1.0);
    vNormal = normalize(uNormalMatrix * aNormal);
    vLightDir = normalize(uLightPos - worldPos.xyz);
    gl_Position = uMVP * vec4(aPos, 1.0);
}
"""

FRAGMENT_LIT = """#version 120
uniform vec4 uColor;
varying vec3 vNormal;
varying vec3 vLightDir;
void main() {
    float diff = max(dot(normalize(vNormal), normalize(vLightDir)), 0.0);
    gl_FragColor = vec4(uColor.rgb * diff, uColor.a);
}
"""

# --- PHONG (Specular + Diffuse + Ambient)
# --- This is... weird, but y'know lighting is important
VERTEX_PHONG = """#version 120
attribute vec3 aPos;
attribute vec3 aNormal;
uniform mat4 uMVP;
uniform mat4 uModel;
uniform mat3 uNormalMatrix;
uniform vec3 uLightPos;
uniform vec3 uViewPos;
varying vec3 vNormal;
varying vec3 vFragPos;
varying vec3 vLightPos;
varying vec3 vViewPos;
void main() {
    vec4 worldPos = uModel * vec4(aPos, 1.0);
    vFragPos = worldPos.xyz;
    vNormal = normalize(uNormalMatrix * aNormal);
    vLightPos = uLightPos;
    vViewPos = uViewPos;
    gl_Position = uMVP * vec4(aPos, 1.0);
}
"""

FRAGMENT_PHONG = """#version 120
uniform vec4 uColor;
uniform float uShininess;
varying vec3 vNormal;
varying vec3 vFragPos;
varying vec3 vLightPos;
varying vec3 vViewPos;

void main() {
    vec3 norm = normalize(vNormal);
    vec3 lightDir = normalize(vLightPos - vFragPos);
    vec3 viewDir = normalize(vViewPos - vFragPos);
    vec3 reflectDir = reflect(-lightDir, norm);

    // Ambient
    vec3 ambient = 0.1 * uColor.rgb;

    // Diffuse
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * uColor.rgb;

    // Specular
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);
    vec3 specular = spec * vec3(1.0);

    gl_FragColor = vec4(ambient + diffuse + specular, uColor.a);
}
"""

# ==========================================================================
# Program code from here on out, no more constant defs for frag/vert
# ==========================================================================

TEMPLATES = {
    "basic": (VERTEX_BASIC, FRAGMENT_BASIC),
    "textured": (VERTEX_TEXTURED, FRAGMENT_TEXTURED),
    "lit": (VERTEX_LIT, FRAGMENT_LIT),
    "phong": (VERTEX_PHONG, FRAGMENT_PHONG),
}

def write_shader(name, variant):
    """Create shader files for the selected variant."""
    vtemplate, ftemplate = TEMPLATES[variant]
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    vcode = HEADER.format(name=name, type="VERTEX", date=date) + "\n" + vtemplate
    fcode = HEADER.format(name=name, type="FRAGMENT", date=date) + "\n" + ftemplate

    vpath = f"{name}.vert"
    fpath = f"{name}.frag"

    if os.path.exists(vpath) or os.path.exists(fpath):
        print(f"Error: '{name}' already exists.")
        return

    with open(vpath, "w") as vfile:
        vfile.write(vcode)
    with open(fpath, "w") as ffile:
        ffile.write(fcode)

    print(f"Created '{vpath}' and '{fpath}' ({variant} template).")

def main():
    parser = argparse.ArgumentParser(description="Shadergen (GLSL 120)")
    parser.add_argument("name", help="Base name for shader (no extension)")
    parser.add_argument("--variant", choices=TEMPLATES.keys(), default="basic",
                        help="Shader template type: basic, textured, lit, phong")
    args = parser.parse_args()

    write_shader(args.name, args.variant)

if __name__ == "__main__":
    main()
else:
    pass